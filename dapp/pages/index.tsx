import Head from "next/head"

import { useQuery } from "@apollo/client"
import { graphql } from "../gql"

import { utils } from "ethers"

import {
    useAccount,
    useConnect,
    useContractRead,
    useContractWrite,
    useDisconnect,
    usePrepareContractWrite,
} from "wagmi"
import { InjectedConnector } from "wagmi/connectors/injected"

import addresses from "@/address.json"
import coreABI from "@/abi/contracts/interfaces/ICore.sol/ICore.json"
import { erc20ABI } from "wagmi"

function Profile() {
    const { address, isConnected } = useAccount()
    const { connect } = useConnect({
        connector: new InjectedConnector(),
    })
    const { disconnect } = useDisconnect()

    if (isConnected)
        return (
            <div>
                Connected to {address}
                <button onClick={() => disconnect()}>Disconnect</button>
            </div>
        )
    return <button onClick={() => connect()}>Connect Wallet</button>
}

const AllGamesQuery = graphql(`
    query Games {
        games {
            id
            timestamp
            home {
                id
                name
            }
            away {
                id
                name
            }
        }
    }
`)

export default function Home() {
    const { data, loading, error } = useQuery(AllGamesQuery)

    const { write: approve } = useContractWrite({
        mode: "recklesslyUnprepared",
        address: addresses.TestToken as `0x${string}`,
        abi: erc20ABI,
        functionName: "approve",
        args: [addresses.Core as `0x${string}`, utils.parseEther("1")],
    })

    const { write: bet } = useContractWrite({
        mode: "recklesslyUnprepared",
        address: addresses.Core as `0x${string}`,
        abi: coreABI,
        functionName: "bet",
        args: [13, 0, utils.parseEther("1")],
    })

    const { address } = useAccount()

    // const {
    //     data: test,
    //     isError,
    //     isLoading,
    // } = useContractRead({
    //     address: addresses.TestToken as `0x${string}`,
    //     abi: erc20ABI,
    //     functionName: "balanceOf",
    //     args: [address as `0x${string}`],
    // })

    if (error) return <div>failed to load</div>
    if (loading) return <div>loading...</div>

    return (
        <>
            <Head>
                <title>BetDog</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Profile />
            {address}
            {/* <h1>{JSON.stringify(test)}</h1> */}
            {data?.games.map((game) => (
                <p key={game.id}>
                    {game.home.name} vs {game.away.name}
                    <button onClick={() => approve()}>授权</button>
                    <button onClick={() => bet()}>下注</button>
                </p>
            ))}
        </>
    )
}
